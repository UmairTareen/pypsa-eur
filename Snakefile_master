from snakemake.utils import min_version

min_version("8.5")


rule run_snakefile_baseline:
    output: touch("run_snakefile_baseline.done")
    log: "logs/run_snakefile_baseline.done",
    shell:
        "snakemake --snakefile Snakefile_baseline --cores 1 -call all"

rule run_snakefile_ref:
    input: "run_snakefile_baseline.done"
    output: touch("run_snakefile_ref.done")
    log: "logs/run_snakefile_ref.done",
    shell:
        "snakemake --snakefile Snakefile_ref_myopic --cores 1 -call all"

rule run_snakefile_nocdr:
    input: "run_snakefile_ref.done"
    output: touch("run_snakefile_nocdr.done")
    log: "logs/run_snakefile_nocdr.done",
    shell:
        "snakemake --snakefile Snakefile_nocdr_myopic --cores 1 -call all"


rule run_all_snakefiles:
    input: "run_snakefile_nocdr.done"

configfile: 'config/config_nocdr_myopic.yaml'

rule plot_country_summary:
    params:
        planning_horizons=config["scenario"]["planning_horizons"],
        sector_opts=config["scenario"]["sector_opts"],
        emissions_scope=config["energy"]["emissions"],
        eurostat_report_year=config["energy"]["eurostat_report_year"],
        plotting=config["plotting"],
        scenario=config["scenario"],
    input:
        "run_snakefile_nocdr.done"
    output:
        balances="results/scenario_results/country_graphs/balances-oil.pdf",
    threads: 2
    resources:
        mem_mb=10000,
    log:
        "logs/plot_country_summary.log",
    benchmark:
        "benchmarks/plot_country_summary",
    conda:
        "envs/environment.yaml"
    script:
        "scripts/plot_country_summary.py"
        
rule run_prepare_scenarios:
    input: balances="results/scenario_results/country_graphs/balances-oil.pdf",
    output: touch("run_prepare_scenarios.done")
    log: "logs/run_prepare_scenarios.done"
    shell:
        "snakemake --snakefile Snakefile_master --cores 1 -call prepare_scenarios"
local_countries = config["countries"].copy()
if "EU" not in local_countries:
    local_countries.append("EU") 
rule prepare_scenarios:
    params:
        countries = config["countries"],
    input:
        cap_files_bau=expand("results/ref/country_csvs/{country}_capacities.csv", country=local_countries),
        cost_files_bau=expand("results/ref/country_csvs/{country}_costs.csv", country=local_countries),
        dem_files_bau=expand("results/ref/country_csvs/{country}_sectordemands.csv", country=local_countries),
        cap_files_ncdr=expand("results/ncdr/country_csvs/{country}_capacities.csv", country=local_countries),
        cost_files_ncdr=expand("results/ncdr/country_csvs/{country}_costs.csv", country=local_countries),
        dem_files_ncdr=expand("results/ncdr/country_csvs/{country}_sectordemands.csv", country=local_countries),
        sepia_config = "SEPIA/SEPIA_config.xlsx",
        file_path = "SEPIA/html_texts.txt", 
        template = "SEPIA/Template/pypsa.html",
        
    output:
        htmlfile=expand("results/scenario_results/{country}_combined_scenario_chart.html", country=local_countries),
    threads: 1
    resources:
        mem_mb=10000,
    log:
        "logs/scenario_results.log",
    benchmark:
        "benchmarks/scenario_results",
    conda:
        "envs/environment.yaml"
    script:
        "SEPIA/scenario_results.py"
        
rule run_all_scenarios:
    input: "run_prepare_scenarios.done"

