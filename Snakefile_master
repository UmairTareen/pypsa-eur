from snakemake.utils import min_version

min_version("7.7")


rule run_snakefile_reff:
    output: touch("run_snakefile_reff.done")
    log: "logs/run_snakefile_reff.done",
    shell:
        "snakemake --snakefile Snakefile_reff --cores 1 -call all"

rule run_snakefile_bau:
    input: "run_snakefile_reff.done"
    output: touch("run_snakefile_bau.done")
    log: "logs/run_snakefile_bau.done",
    shell:
        "snakemake --snakefile Snakefile_bau_myopic --cores 1 -call all"

rule run_snakefile_nocdr:
    input: "run_snakefile_bau.done"
    output: touch("run_snakefile_nocdr.done")
    log: "logs/run_snakefile_nocdr.done",
    shell:
        "snakemake --snakefile Snakefile_nocdr_myopic --cores 1 -call all"


rule run_all_snakefiles:
    input: "run_snakefile_nocdr.done"

configfile: 'config/config_nocdr_myopic.yaml'
rule run_prepare_scenarios:
    input: "run_snakefile_nocdr.done"
    output: touch("run_prepare_scenarios.done")
    log: "logs/run_prepare_scenarios.done"
    shell:
        "snakemake --snakefile Snakefile_master --cores 1 -call prepare_scenarios"
rule prepare_scenarios:
    params:
        countries = config["countries"],
    input:
        cap_files_bau=expand("results/bau/country_csvs/{country}_capacities.csv", country=config["countries"]),
        cost_files_bau=expand("results/bau/country_csvs/{country}_costs.csv", country=config["countries"]),
        dem_files_bau=expand("results/bau/country_csvs/{country}_sectordemands.csv", country=config["countries"]),
        cap_files_ncdr=expand("results/ncdr/country_csvs/{country}_capacities.csv", country=config["countries"]),
        cost_files_ncdr=expand("results/ncdr/country_csvs/{country}_costs.csv", country=config["countries"]),
        dem_files_ncdr=expand("results/ncdr/country_csvs/{country}_sectordemands.csv", country=config["countries"]),
        
    output:
        htmlfile=expand("results/scenario_results/{country}_combined_scenario_chart.html", country=config["countries"]),
    threads: 1
    resources:
        mem_mb=10000,
    log:
        "logs/scenario_results.log",
    benchmark:
        "benchmarks/scenario_results",
    conda:
        "envs/environment.yaml"
    script:
        "SEPIA/scenario_results.py"
        
rule run_all_scenarios:
    input: "run_prepare_scenarios.done"

